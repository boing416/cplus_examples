#include<iostream>
#include<string>  
#include<ctime>
using namespace std;

void Code_N()
{
	//setlocale(LC_ALL, "Rus"); 
	int i = 0, count_number = 0;
	char simbol;
	int direction;

	cout << "Insert count simbol: ";

	cin >> count_number;

	cout << "What is simbol? " <<
		"2.Gorizontal" << "1.Vertical";

	cin >> direction;

	simbol = 'w';

	switch (direction)
	{
	case 1:
		while (i < count_number)
		{
			cout << simbol;
			i++;
		}
		break;
	case 2:
		while (i < count_number)
		{
			cout << simbol << '\n';
			i++;
		}
		break;

	default:
		break;
	}
}

void Code7()
{
	//Заполнить массив случайными числами. Генератор уникальных случайных чисел. rand. srand ДЗ #7 и найти min number; 
	int const SIZE = 10;
	srand(time(NULL));

	int arr[SIZE];
	int min_number = 100;
	int number_rand;
	for (int i = 0; i < SIZE; i++)
	{
		bool rec = true;
		number_rand = rand() % 100;
		for (int k = 0; k < sizeof(arr) / sizeof(arr[0]); k++)
		{
			if (arr[k] == number_rand)
				rec = false;
		}

		if (rec)
			arr[i] = number_rand;

		if (min_number > number_rand)
			min_number = number_rand;
	}

	for (int i = 0; i < SIZE; i++)
	{
		cout << arr[i] << endl;
	}

	cout << "MIN NUMBER: " << min_number << endl;
	system("pause");
} 

template <typename T, typename U> 
T sum(T a, U b)
{
	return a + b;
}

int Factorial(int number)
{
	if (number == 0)
		return 0;
	if(number == 1)
		return 1;  	

	return number * Factorial(number - 1);
}

void ChangeValue(int *px, int *py)
{
	int temp = *px;
	*px = *py;
	*py = temp;
}

void LinkMemory(int *pa)
{
	//////////////////////////memory links
	//int a = 5;
	//int *px = &a;
	// cout << px << endl;

	//int arr[5]{ 4,7,1,4,2 };
	//cout << arr << endl; //first element array;

	//(*pa)++;

	


}
void DoubleArray()
{
	int rows = 5;
	int cols = 6;

	int **arr = new int*[rows];

	for (int i = 0; i < rows; i++)
	{
		arr[i] = new int[cols];
	}


	for (int i = 0; i < rows; i++)
	{
		for (int k = 0; k < cols; k++)
		{
			arr[i][k] = rand() % 100;
			cout << arr[i][k] << "\t";
		}

		cout << endl;
	}


	//////////////////CLEAR MEMORY////////////////
	for (int i = 0; i < rows; i++)
	{
		delete[] arr[i];
	}
	delete[] arr;

}

template <typename T, typename U>
void TemplateFunc(T *px,  U *py) //ДЗ написать ШАБЛОННУЮ функцию которая меняет местами значения 2-х переменных с помощью ССЫЛОК.

{
	int temp = *px;
	*px = *py;
	*py = temp;
}

void FillArray(int* const arr,const int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 10;
	}
}

void ShowArray(const int* const arr,const int size)
{
	for (int i = 0; i < size; i++)
	{
		cout<< arr[i] << "\t";   
	}

	cout << endl;  
}


void push_back(int *&arr, int &size,const int value)//Изменить размер массива. Удалить. Добавить элемент в массив. Увеличение массива. с++
{
	int *newarray = new int[size + 1];

	for (int i = 0; i < size; i++)
	{
		newarray[i] = arr[i];
	}

	newarray[size] = value; 

	size++;

	delete[] arr; 

	arr = newarray; 
}
void pop_back(int *&arr, int &size)//Изменить размер массива. Удалить. Добавить элемент в массив. Удалить массива. с++
{
	size--;
	int *newarray = new int[size]; 
	for (int i = 0; i < size; i++)
	{
		newarray[i] = arr[i]; 
	}

	delete[] arr;

	arr = newarray; 
}
int CountChar(char Str[])
{
	int result = 0;

	for (int i = 0; i < strlen(Str); i++)
	{
		result++;
	}

	return result;

}

void ShowInfo(string(*foo)())//Указатель на функцию в качестве параметра. Передача функции в качестве параметра.
{
	cout << foo() << endl;
}
#define PI 3.14 
#define FOO(x,y) ((x)+(y)) 
//Препроцессор что это. Директива #define. Макросы.

#ifdef DEBUG 
cout << 123;
#endif

class Point
{

	
public:
	int x;
private:
	int y, z;
public:

	Point(int x, int y)
	{
		this->x = x;
		this->y = x;
	}

	Point()	{}

	int GetX()
	{
		return x;
	}

	void SetX(int value)
	{
		x = value; 
	}
	void Print()
	{
		cout << "X= " << x << endl;
		cout << "Y= " << y << endl; 

	}

	bool operator ==(const Point & other) 
	{
		return this->x == other.x && this->y == other.y;
		
	}

	Point operator +(const Point & other)
	{
		Point temp;
		temp.x = this->x + other.x; 
		temp.y = this->y + other.y; 

		return temp; 
	}

	Point & operator ++() // префиксная форма
	{
		this->x++;
		this->y++; 

		return *this; 
	}
	Point & operator ++(int value) // постфиксная форма 
	{

		Point temp(*this);

		this->x++;
		this->y++;

		return temp; 
	}
	
	friend void ChangeX(Point &value);
};

class TestClass
{
public:
	int & operator [](int index)
	{
		return arr[index]; 
	}

private:
	int arr[4]{5,44,987,69};
};

class MyClass
{
public:
	int *data;

	MyClass(int size)
	{
		this->Size = size; 
		this->data = new int[size];
		for (int i = 0; i < size; i++)
		{
			data[i] = i; 
		}
		cout << "constructor" << this << endl;

	};
	MyClass(const MyClass &other)
	{
		this->Size = other.Size; 

		this->data = new int[other.Size]; 
		for (int i = 0; i < other.Size; i++)
		{
			this->data[i] = other.data[i];
		} 
		cout << "copy constructor" << this << endl;

		 
	}; 

	~MyClass()
	{
		cout << "Destructor" << this << endl;
		delete[] data; 
	}
	void MyClass::MyFunction()
	{
	}
	;
private:
	int Size; 
}; 

class MyClass
{
public:
	MyClass();
	~MyClass();

	void MyFunction();

private:

};

MyClass::MyClass()
{
}

MyClass::~MyClass()
{
}


void ChangeX(Point &value)
{
	value.x = -1; 
}



int main() 
{   
	MyClass b(1);  
	MyClass a(b); 




	/*Point point(10,20); 
	point.SetX(250);
	point.Print(); */

	/*Point a(5, 6); 
	Point b(67, 46);
	Point c = a + b;  

	cout << c.GetX() << endl;  */

	//TestClass a;
	//cout << a[2] << endl; 

	//int size = 5; //Изменить размер массива. Удалить. Добавить элемент в массив. Увеличение массива. с++
	//int *arr = new int[size];

	//FillArray(arr, size);    
	//ShowArray(arr, size); 
	//push_back(arr, size, 123); 
	//ShowArray(arr, size);  
	//pop_back(arr, size);
 //	ShowArray(arr, size);

	//delete[] arr; 

	



	/*int size = 10;
	int *firstarray = new int[size];
	int *secondarray = new int[size];

	FillArray(firstarray,size);
	FillArray(secondarray,size);

	ShowArray(firstarray,size);
	ShowArray(secondarray,size);


	delete[] firstarray;
	delete[] secondarray; */


	  
	/*int a = 1;
	string	b = "Test";

	cout << a << endl;
	cout << b << endl; 
	TemplateFunc(&a, &b);  
	cout << a << endl;
	cout << b << endl; 	 */

	system("pause"); 
}

